<?php

/**
 * @file
 * Contains Pasargad Bank Paypaad Payment API implementations and helpers.
 *
 * @todo
 * - Hook designation.
 * - Error watchdog log.
 */

/**
 * Defines API version.
 */
define('PAYPAAD_API_VERSION', '2.0');

/**
 * Defines gateway default transaction trace URI.
 */
define('PAYPAAD_TRACE_URI', 'https://paypaad.bankpasargad.com/PaymentTrace');

/**
 * Defines gateway default controller URI.
 */
define('PAYPAAD_CONTROLLER_URI', 'https://paypaad.bankpasargad.com/PaymentController');

/**
 * API function to trace back a transaction status.
 *
 * @param $reference
 *   Transaction reference number.
 * @param $alternative
 *   An array of following data to be used in case
 *   that $reference is not available, see docs, v2, p6.
 *   - invoice_number
 *   - invoice_date
 *   - merchant_code
 *   - terminal_code
 * @param $gateway
 *   Paypaad gateway trace URI.
 * @param $parse
 *   Whether to parse response to an object.
 *
 * @return
 *   Request response consists of following parameters
 *   in form of a multi-dimensional array or raw XML string,
 *   if requested so. In case of operation failure it returns
 *   FALSE. See docs, v2, p6.
 *   - result: String "true" or "false", indicating operation status.
 *   - trasaction_reference_id
 *   - invoice_number
 *   - invoice_date
 *   - merchant_code
 *   - terminal_code
 *   - trace_number
 *   - reference_number
 *   - transaction_date
 *
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function paypaad_trace($reference, $alternative = array(), $gateway = PAYPAAD_TRACE_URI, $parse = TRUE) {
  // Partially check requirements.
  if (!$reference && empty($alternative)) {
    return FALSE;
  }

  // Load internal helpers.
  module_load_include('inc', 'paypaad');
  // Setting POST parameters.
  $params = $reference ? array('tref' => $reference) : $alternative;
  // Dispatch HTTP POST request.
  $response = _paypaad_curl($gateway, $params);
  // Return response as requested.
  return $parse ? _paypaad_xml_parse($response) : $response;
}

/**
 * API function to return a successfull request response.
 *
 * @return
 *   An array of request response.
 *
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function paypaad_response() {
  if (isset($_GET['iD'], $_GET['iN'], $_GET['tref'])) {
    return array(
      'invoice_date' => check_plain($_GET['iD']),
      'invoice_number' => check_plain($_GET['iN']),
      'transaction_reference' => check_plain($_GET['tref']),
    );
  }
  // Unexpected failure.
  return FALSE;
}

/**
 * API function to create invoice content's XML representation.
 *
 * @param $content
 *   An array of required content items as per defined in gateway docs, v2.
 *   - time_stamp: Request date in PHP's "Y/m/d H:i:s" format. (optional)
 *   - invoice_date: Invoice date in an optional format. (optional)
 *   - invoice_number: Invoice number.
 *   - merchant_code: Store merchant code as per provided by Paypaad.
 *   - terminal_code: Store terminal code as per provided by Paypaad.
 *   - redirect_address: Operation success URL.
 *   - referer_address: Operation failure URL.
 *   - delivery_days: Number of days in which the products will be delivered.
 *   - total_amount: Order total amount.
 *   - buyer_name: Customer name.
 *   - buyer_tel: Customer contact tel.
 *   - delivery_address: Products delivery address.
 *   - items: An array of products information as described below.
 * @param $items
 *   An array of product arrays/objects or a single product array/object,
 *   which will be injected into $content array as per defined in docs, v2.
 *   Please note that if $content['items'] is set, this parameter will be ignored.
 *   - content: Product title.
 *   - count: Number of purchased products.
 *   - fee: Price of product unit.
 *   - amount: fee x count amount.
 *   - description: Product description.
 * @param $validate
 *   Whether to validate the generated XML against its DTD.
 *
 * @return
 *   XML representation of passed arguments or FALSE on fail.$items
 *
 * @see _paypaad_xml_build()
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function paypaad_xml(&$content, $items = array(), $validate = FALSE) {
  // Not enough minerals?!
  if (count($content) < 10) {
    return FALSE;
  }
  // Load internal helpers.
  module_load_include('inc', 'paypaad');
  // Get the items array. Any "items" element in content will overwrite the passed $items.
  $items = (isset($content['items']) && !empty($content['items'])) ? $content['items'] : $items;
  unset($content['items']);
  // Default value for time_stamp, if not set.
  $content['time_stamp'] = $content['time_stamp'] ? $content['time_stamp'] : date('Y/m/d H:i:s');
  // Default value for invoice_date, if not set.
  $content['invoice_date'] = $content['invoice_date'] ? $content['invoice_date'] : format_date(time());
  // Wrap a single product array/object to be prepared to be built.
  if (!empty($items) && (is_object($items) || !is_array($items[0]))) {
    $items = array($items);
  }
  // Build and return.
  return _paypaad_xml_build($content, $items, $validate);
}

/**
 * API function that signs XML representation of content.
 *
 * @param $xml
 *   Valid XML representation of content as per defined in docs, v2.
 * @param $private
 *   Private key as per required by openssl_pkey_get_private().
 * @param $passphrase
 *   Private key passphrase in case that the $private is encrypted.
 * @param $public
 *   Optional public key as per required by openssl_verify(),
 *   if set, generated signature will be passed through openssl_verify() to
 *   get verified. Note that $public format differs from the $private one and
 *   should be a openssl_pkey_get_public() valid output or the operation fails.
 *   Am lazy, ya!
 *
 * @return
 *   Either signed XML content or FALSE on fail.
 *
 * @see paypaad_xml()
 * @see http://php.net/manual/en/book.openssl.php
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function paypaad_sign($xml, $private, $passphrase = '', $public = FALSE) {
  // Fail if OpenSSL extension is not loaded.
  if (!extension_loaded('openssl')) {
    return FALSE;
  }

  // Get private key if possible.
  if ($private = openssl_pkey_get_private($private, $passphrase)) {
    $sign = '';
    // Generate the signature if possible.
    if (openssl_sign($xml, $sign, $private)) {
      // Verify the signature using public pair, if requested so.
      if (!$public || openssl_verify($xml, $sign, $public) === 1) {
        // Gateway requires a Base64 encoded string
        // of the generated signature, see docs v2, p3.
        return base64_encode($sign);
      }
    }
    // Free $private from memory.
    openssl_free_key($private);
  }
  // Operation failed.
  return FALSE;
}

/**
 * API function that saves a successfull Paypaad Payment transaction.
 *
 * @param $transaction
 *   Transaction object as per defined in paypaad_trace() return value docs.
 * @param $entity_id
 *   Drupal order entity identifier.
 *   e.g. Ubercart order identifier in case of Ubercart usage,
 *   or a node identifier in case of Drupal Payment API, etc.
 * @param $module_id
 *   Caller module identifier.
 *
 * @return
 *   drupal_write_record() return value.
 *
 * @see paypaad_trace()
 */
function paypaad_save($transaction, $entity_id, $module_id) {
  global $user;
  $transaction = (object) $transaction;

  // Prepare the transaction object.
  $transaction->uid = $user->uid;
  $transaction->module_id = $module_id;
  $transaction->entity_path = $entity_path;
  unset($transaction->result, $transaction->merchant_code, $transaction->terminal_code);
  // Set record timestamp, if not set.
  if (!isset($transaction->timestamp)) {
    $transaction->timestamp = time();
  }
  // Convert invoice date to timestamp.
  // Invoice date is returned from the Paypaad gateway
  // in "D, Y/m/d - H:i" format. date_parse_from_format()
  // seems ideal here but it's 5.3, you know! Another option
  // could be strpstime() but it's not available in suckin'
  // windows machines. so we need to remove the separator
  // dash and use strtotime() instead.
  $transaction->invoice_date = strtotime(str_replace(' -', '', $transaction->invoice_date));

  return drupal_write_record('paypaad', $transaction);
  // Damn! if I could use that strptime() for World Calendars!!_
}

/**
 * API function to remove a stored Paypaad transaction.
 *
 * @param $pid
 *   Paypaad transaction identifier.
 */
function paypaad_delete($pid) {
  db_query("DELETE FROM {paypaad} WHERE pid = %d", $pid);
  return db_affected_rows();
}

/**
 * API function to load a Paypaad transaction.
 *
 * @param $params
 *   The pid of the Paypaad transaction or an array of conditions to match against.
 * @param $fields
 *   An array of database field names to retrieve.
 * @param $reset
 *   Whether to flush the internal cache.
 *
 * @return
 *   Loaded Paypaad transaction object or an array of these objects.
 *   It returns FALSE on fail.
 */
function paypaad_load($params = array(), $fields = array(), $reset = FALSE) {
  static $cache = array();

  // Flush the internal cache, if set so.
  if ($reset) {
    $cache = array();
  }
  // Check for cache availablity.
  if (is_numeric($params)) {
    if (isset($cache[$params])) {
      return (object) $cache[$params];
    }
    $conditions = 'pid = %d';
    $arguments  = $params;
  }
  // Parameters passed as an array.
  elseif (is_array($params)) {
    // Parse the $params array into a query.
    $conditions = $arguments = array();
    foreach ($params as $key => $value) {
      // Parse timestamp.
      if ($key == 'period') {
        // "from" element is not set, #fail.
        if (!isset($value['from'])) {
          return FALSE;
        }
        // Enough period parameters provided.
        $conditions[] = '(timestamp BETWEEN %d AND %d)';
        $arguments[] = $value['from'];
        $arguments[] = isset($value['to']) ? $value['to'] : time();
      }
      // Other than timestamp.
      else {
        $conditions[] = db_escape_table($key) . " = '%s'";
        $arguments[] = $value;
      }
    }
    $conditions = empty($conditions) ? 'TRUE' : implode(' AND ', $conditions);
  }
  // Not enough arameters.
  else {
    return FALSE;
  }

  // Prepare fields to be retrieved.
  $fields = (empty($fields) || !is_array($fields)) ? '*' : implode(',', $fields);

  // Retrieve results.
  $transactions = array();
  // Just ignore that coder critical thing ;)
  $results = db_query("SELECT $fields FROM {paypaad} WHERE $conditions", $arguments);
  // Iterate through results and build an array of objects.
  while ($transaction = db_fetch_object($results)) {
    $transactions[] = $transaction;
    // Set an internal cache entry per each transaction.
    $cache[$transaction->pid] = $transaction;
  }

  // If there is one, remove the wrapper.
  $count = count($transactions);
  if ($count == 1) {
    $transactions = $transactions[0];
  }
  // If there is no results at all.
  elseif (!$count) {
    return FALSE;
  }

  return $transactions;
}

/**
 * API function to get Paypaad Payment gateway settings.
 *
 * This will provide fellow modules to have their settings
 * values separately via API.
 *
 * @param $name
 *   One of following settings names as registered by
 *   module identified by $id.
 *   - merchant
 *   - terminal
 *   - delivery_days
 *   - key_private
 *   - key_passphrase
 *   - key_public
 *   - trace_uri
 *   - controller_uri
 * @param $id
 *   Callee module identifier calling the API.
 * @param $default
 *   Default value as per required by variable_get().
 *
 * @return
 *   Either the $name settings value or $default value.
 */
function paypaad_settings($name, $id, $default = '') {
  return variable_get("{$id}_paypaad_{$name}", $default);
}

/**
 * UI helper function that injects required settings fields into the passed form.
 *
 * @param $form
 *   Form (sub)array.
 * @param $id
 *   Callee module identifier used as field name prefix.
 *
 * @return
 *   Field injected $form array!
 */
function paypaad_settings_fields(&$form, $id) {
  // Paypaad 9-digit merchant code.
  $form["{$id}_paypaad_merchant"] = array(
    '#type' => 'textfield',
    '#title' => t('Merchant code'),
    '#description' => t("Enter Paypaad's 9-digit merchant code."),
    '#default_value' => paypaad_settings('merchant', $id, ''),
    '#required' => TRUE,
  );
  // Paypaad 10-digit terminal code.
  $form["{$id}_paypaad_terminal"] = array(
    '#type' => 'textfield',
    '#title' => t('Terminal code'),
    '#description' => t("Enter Paypaad's 10-digit terminal code."),
    '#default_value' => paypaad_settings('terminal', $id, ''),
    '#required' => TRUE,
  );
  // Maximum product delivery days.
  $form["{$id}_paypaad_delivery_days"] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum number of delivery days'),
    '#description' => t('Maximum number of days in which the product will be delivered to customer.'),
    '#default_value' => paypaad_settings('delivery_days', $id, ''),
    '#required' => TRUE,
  );
  // Key pair options.
  $form['keys'] = array(
    '#type' => 'fieldset',
    '#title' => t('Key options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Private PEM key path.
  $form['keys']["{$id}_paypaad_key_private"] = array(
    '#type' => 'textfield',
    '#title' => t('Private key file'),
    '#description' => t('Accessible absolute system path to your private key PEM file.'),
    '#default_value' => paypaad_settings('key_private', $id, ''),
    '#required' => TRUE,
  );
  // Passphrase in case that the private key is encrypted.
  $form['keys']["{$id}_paypaad_key_passphrase"] = array(
    '#type' => 'textfield',
    '#title' => t('Private key passphrase'),
    '#description' => t('Private key passphrase in case that your key file is encrypted.'),
    '#default_value' => paypaad_settings('key_passphrase', $id, ''),
  );
  // Public PEM key path.
  $form['keys']["{$id}_paypaad_key_public"] = array(
    '#type' => 'textfield',
    '#title' => t('Public key file'),
    '#description' => t('Optional accessible absolute system path to your public key PEM file for verification purposes.'),
    '#default_value' => paypaad_settings('key_public', $id, ''),
  );
  // Paypaad gateway URIs.
  $form['additional'] = array(
    '#type' => 'fieldset',
    '#title' => t('Additional options'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  // Paypaad gateway trace URI.
  $form['additional']["{$id}_paypaad_trace_uri"] = array(
    '#type' => 'textfield',
    '#title' => t('Paypaad gateway trace URI'),
    '#description' => t('Do not change the default value unless you checked that Paypaad docs and it has changed.'),
    '#default_value' => paypaad_settings('trace_uri', $id, PAYPAAD_TRACE_URI),
    '#required' => TRUE,
  );
  // Paypaad gateway controller URI.
  $form['additional']["{$id}_paypaad_controller_uri"] = array(
    '#type' => 'textfield',
    '#title' => t('Paypaad gateway controller URI'),
    '#description' => t('Do not change the default value unless you checked that Paypaad docs and it has changed.'),
    '#default_value' => paypaad_settings('controller_uri', $id, PAYPAAD_CONTROLLER_URI),
    '#required' => TRUE,
  );

  return $form;
}

/**
 * UI helper for Paypaad settings form validation process.
 *
 * @param $form
 *   Form array as provided to a form validation callback.
 * @param $form_state
 *   Form state array as provided to a form validation callback.
 * @param $id
 *   Module identifier used as field name prefix.
 *
 * @see paypaad_settings()
 * @see paypaad_settings_fields()
 */
function paypaad_settings_fields_validate($form, &$form_state, $id) {
  // Check merchant code for a 9-digit number. drupal_strlen() usage is not necessary here.
  if (!ctype_digit($form_state['values']["{$id}_paypaad_merchant"]) || strlen($form_state['values']["{$id}_paypaad_merchant"]) != 9) {
    form_set_error("{$id}_paypaad_merchant", t('Paypaad merchant code must be a 9-digit numeric value.'));
  }
  // Check terminal code for a 10-digit number. Same drupal_strlen() story here.
  if (!ctype_digit($form_state['values']["{$id}_paypaad_terminal"]) || strlen($form_state['values']["{$id}_paypaad_terminal"]) != 10) {
    form_set_error("{$id}_paypaad_terminal", t('Paypaad terminal code must be a 10-digit numeric value.'));
  }
  // Check delivery days for a positive number.
  if (!ctype_digit($form_state['values']["{$id}_paypaad_delivery_days"])) {
    form_set_error("{$id}_paypaad_delivery_days", t('Maximum delivery days must be a positive number.'));
  }
  // Check private key file path.
  if (!is_readable($form_state['values']["{$id}_paypaad_key_private"])) {
    form_set_error("{$id}_paypaad_key_private", t('Private key file is not a valid readable file.'));
  }
  // Check public key file path, if set.
  if (!empty($form_state['values']["{$id}_paypaad_key_public"]) && !is_readable($form_state['values']["{$id}_paypaad_key_public"])) {
    form_set_error("{$id}_paypaad_key_public", t('Public key file is not a valid readable file.'));
  }
  // Check gateway trace URL.
  if (!valid_url($form_state['values']["{$id}_paypaad_trace_uri"], TRUE)) {
    form_set_error("{$id}_paypaad_trace_uri", t('Paypaad gateway trace URI must be a valid URL.'));
  }
  // Check gateway controller URL.
  if (!valid_url($form_state['values']["{$id}_paypaad_controller_uri"], TRUE)) {
    form_set_error("{$id}_paypaad_controller_uri", t('Paypaad gateway controller URI must be a valid URL.'));
  }
}

/**
 * UI helper that injects required hidden fields to the passed form (sub)array.
 *
 * @param $content
 *   XML representation of invoice.
 * @param $sign
 *   Signed copy of invoice XML.
 * @param $form
 *   Form (sub)array.
 *
 * @return
 *   Field injected form (sub)array.
 */
function paypaad_hidden_fields($content, $sign, &$form = array()) {
  // Inject XML representation of invoice.
  $form['content'] = array(
    '#type' => 'hidden',
    '#value' => $content,
  );
  // Then the signed copy.
  $form['sign'] = array(
    '#type' => 'hidden',
    '#value' => $sign,
  );

  return $form;
}

