<?php
// $Id$

/**
 * @file
 * Contains Pasargad Bank Payment API implementations and helpers.
 * @todo
 * Hook designation.
 */

/**
 * Defines API version.
 */
define('PASARGAD_API_VERSION', '2.0');

/**
 * Defines gateway default transaction trace URI.
 */
define('PASARGAD_TRACE_URI', 'https://paypaad.bankpasargad.com/PaymentTrace');

/**
 * Defines gateway default controller URI.
 */
define('PASARGAD_CONTROLLER_URI', 'https://paypaad.bankpasargad.com/PaymentController');

/**
 * API function to dispatch a HTTP POSTrequest to gateway.
 *
 * @param $content
 *   Valid XML representation of invoice as per described in docs, v2, p3.
 * @param $sign
 *   Verified signed $content, see docs, v2, p3.
 * @param $gateway
 *   Pasargad Bank gateway controller URI.
 *
 * @return
 *   FALSE on fail.
 *
 * @see pasargad_xml()
 * @see pasargad_sign()
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function pasargad_request($content, $sign, $gateway = PASARGAD_CONTROLLER_URI) {
  // Partially check requirements.
  if (empty($content) || empty($sign)) {
    return FALSE;
  }
  // Load internal helpers.
  module_load_include('inc', 'pasargad');
  // Setting POST parameters.
  $params = array('content' => $content, 'sign' => $sign);
  // Dispatch HTTP POST Request.
  // In case of an internal failure, this will
  // return FALSE & in an external case, the customer
  // will be redirected in the referer_address URI
  // defined in $content. Finally if the request verified
  // at the gateway side & everything goes well, the customer
  // will be redirected to redirect_address specified in $content.
  return _pasargard_curl($gateway, $params);
}

/**
 * API function to trace back a transaction status.
 *
 * @param $reference
 *   Transaction reference number.
 * @param $alternative
 *   An array of following data to be used in case
 *   that $reference is not available, see docs, v2, p6.
 *   - invoice_number
 *   - invoice_date
 *   - merchant_code
 *   - terminal_code
 * @param $gateway
 *   Pasargad Bank gateway trace URI.
 * @param $parse
 *   Whether to parse response to an object.
 *
 * @return
 *   Request response consists of following parameters
 *   or FALSE in case of operation failure.
 *   - trace_number
 *   - reference_number
 *   - transaction_date
 *
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function pasargad_trace($reference, $alternative = array(), $gateway = PASARGAD_TRACE_URI, $parse = TRUE) {
  // Partially check requirements.
  if (!$reference && count($alternative) < 4) {
    return FALSE;
  }
  // Load internal helpers.
  module_load_include('inc', 'pasargad');
  // Setting POST parameters.
  $params = $reference ? array($reference) : $alternative;
  // Dispatch HTTP POST request.
  $response = _pasargard_curl($gateway, $params);
  // Return response as requested.
  return $parse ? simplexml_load_string($response) : $response;
}

/**
 * API function to return a request response.
 *
 * @param $status
 *   Indicates what situation we're in.
 *   - failed: Indicates transaction failure.
 *   - successed: The transaction was successfull, so gateway
 *     has sent following elements via HTTP POST. See docs, v2, p6.
 *     - iD: Invoice date.
 *     - iN: Invoice number.
 *     - tref: Transaction reference as shown to our customer.
 *
 * @return
 *   An array of request response.
 *
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function pasargad_response($status) {
  switch ($status) {
    case 'failed':
      return FALSE;

    case 'successed':
      // TODO: Sanitize.
      return array(
        'invoice_date' => $_POST['iD'],
        'invoice_number' => $_POST['iN'],
        'transaction_reference' => $_POST['tref'],
      );
  }
}

/**
 * API function to create invoice content's XML representation.
 *
 * @param $content
 *   An array of required content items as per defined in gateway docs, v2.
 *   - time_stamp: Request date in PHP's "Y/m/d H:i:s" format. (optional)
 *   - invoice_date: Invoice date in an optional format. (optional)
 *   - invoice_number: Invoice number.
 *   - merchant_code: Store merchant code as per provided by Pasargad Bank.
 *   - terminal_code: Store terminal code as per provided by Pasargad Bank.
 *   - redirect_address: Operation success URL.
 *   - referer_address: Operation failure URL.
 *   - delivery_days: Number of days in which the products will be delivered.
 *   - total_amount: Order total amount.
 *   - buyer_name: Customer name.
 *   - buyer_tel: Customer contact tel.
 *   - delivery_address: Products delivery address.
 * @param $items
 *   An array of product arrays/objects or a single product array/object,
 *   which will be injected into $content array as per defined in docs, v2.
 *   - content: Product title.
 *   - count: Number of purchased products.
 *   - fee: Price of product unit.
 *   - amount: fee x count amount.
 *   - description: Product description.
 *
 * @return
 *   XML representation of passed arguments or FALSE on fail.$items
 *
 * @see _pasargad_xml_build()
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function pasargad_xml(&$content, $items = array()) {
  // Not enough minerals?!
  if (count($content) < 10) {
    return FALSE;
  }
  // Load internal helpers.
  module_load_include('inc', 'pasargad');
  // Default value for time_stamp, if not set.
  $content['time_stamp'] = $content['time_stamp'] ? $content['time_stamp'] : date('Y/m/d H:i:s');
  // Default value for invoice_date, if not set.
  $content['invoice_date'] = $content['invoice_date'] ? $content['invoice_date'] : format_date(time());
  // Wrap a single product array/object to be prepared to be built.
  if (!empty($items) && (is_object($items) || !is_array($items[0]))) {
    $items = array($items);
  }
  // Build and return.
  return _pasargad_xml_build($content, $items);
}

/**
 * API function that signs XML representation of content.
 *
 * @param $xml
 *   Valid XML representation of content as per defined in docs, v2.
 * @param $private
 *   Private key as per required by openssl_pkey_get_private().
 * @param $passphrase
 *   Private key passphrase in case that the $private is encrypted.
 * @param $public
 *   Optional public key as per required by openssl_verify(),
 *   if set, generated signature will be passed through openssl_verify() to
 *   get verified. Note that $public format differs from the $private one and
 *   should be a openssl_pkey_get_public() valid output or the operation fails.
 *   Am lazy, ya!
 *
 * @return
 *   Either signed XML content or FALSE on fail.
 *
 * @see pasargad_xml()
 * @see http://php.net/manual/en/book.openssl.php
 * @see http://developers.paypaad.ir/docs/readme.pdf
 */
function pasargad_sign($xml, $private, $passphrase = '', $public = FALSE) {
  // Fail if OpenSSL extension is not loaded.
  if (!extension_loaded('openssl')) {
    return FALSE;
  }

  // Get private key if possible.
  if ($private = openssl_pkey_get_private($private, $passphrase)) {
    $sign = '';
    // Generate the signature if possible.
    if (openssl_sign($xml, $sign, $private)) {
      // Verify the signature using public pair, if requested so.
      if (!$public || openssl_verify($xml, $sign, $public) === 1) {
        // Gateway requires a Base64 encoded string
        // of the generated signature, see docs v2, p3.
        return base64_encode($sign);
      }
    }
    // Free $private from memory.
    openssl_free_key($private);
  }
  // Operation failed.
  return FALSE;
}

